warning: #[column_name] attribute form is deprecated
  = help: use `#[diesel(column_name = username)]` instead

warning: #[column_name] attribute form is deprecated
  = help: use `#[diesel(column_name = password_hash)]` instead

warning: #[column_name] attribute form is deprecated
  = help: use `#[diesel(column_name = username)]` instead

warning: #[column_name] attribute form is deprecated
  = help: use `#[diesel(column_name = password_hash)]` instead

{"$message_type":"diagnostic","message":"unused import: `actix_web::web::Data`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":52,"byte_end":72,"line_start":2,"line_end":2,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use actix_web::web::Data;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":48,"byte_end":75,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use actix_web::web::Data;","highlight_start":1,"highlight_end":26},{"text":"use diesel::MysqlConnection;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `actix_web::web::Data`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse actix_web::web::Data;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `diesel::MysqlConnection`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":79,"byte_end":102,"line_start":3,"line_end":3,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use diesel::MysqlConnection;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":75,"byte_end":105,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::MysqlConnection;","highlight_start":1,"highlight_end":29},{"text":"use diesel::r2d2::{ConnectionManager, Pool};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `diesel::MysqlConnection`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::MysqlConnection;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `ConnectionManager` and `Pool`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":124,"byte_end":141,"line_start":4,"line_end":4,"column_start":20,"column_end":37,"is_primary":true,"text":[{"text":"use diesel::r2d2::{ConnectionManager, Pool};","highlight_start":20,"highlight_end":37}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\controllers\\model_controller.rs","byte_start":143,"byte_end":147,"line_start":4,"line_end":4,"column_start":39,"column_end":43,"is_primary":true,"text":[{"text":"use diesel::r2d2::{ConnectionManager, Pool};","highlight_start":39,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":105,"byte_end":151,"line_start":4,"line_end":5,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::r2d2::{ConnectionManager, Pool};","highlight_start":1,"highlight_end":45},{"text":"use crate::pool::app_state;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `ConnectionManager` and `Pool`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:4:20\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::r2d2::{ConnectionManager, Pool};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `crate::pool::app_state`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":155,"byte_end":177,"line_start":5,"line_end":5,"column_start":5,"column_end":27,"is_primary":true,"text":[{"text":"use crate::pool::app_state;","highlight_start":5,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":151,"byte_end":180,"line_start":5,"line_end":6,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::pool::app_state;","highlight_start":1,"highlight_end":28},{"text":"use crate::pool::app_state::{AppState, DbPool};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::pool::app_state`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::pool::app_state;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `AppState`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":209,"byte_end":217,"line_start":6,"line_end":6,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"use crate::pool::app_state::{AppState, DbPool};","highlight_start":30,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":208,"byte_end":209,"line_start":6,"line_end":6,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"use crate::pool::app_state::{AppState, DbPool};","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\controllers\\model_controller.rs","byte_start":209,"byte_end":219,"line_start":6,"line_end":6,"column_start":30,"column_end":40,"is_primary":true,"text":[{"text":"use crate::pool::app_state::{AppState, DbPool};","highlight_start":30,"highlight_end":40}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\controllers\\model_controller.rs","byte_start":225,"byte_end":226,"line_start":6,"line_end":6,"column_start":46,"column_end":47,"is_primary":true,"text":[{"text":"use crate::pool::app_state::{AppState, DbPool};","highlight_start":46,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `AppState`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:6:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::pool::app_state::{AppState, DbPool};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Bigint`, `Integer`, `Nullable`, `Timestamp`, and `Varchar`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\entity\\file.rs","byte_start":49,"byte_end":56,"line_start":2,"line_end":2,"column_start":25,"column_end":32,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":25,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\entity\\file.rs","byte_start":58,"byte_end":66,"line_start":2,"line_end":2,"column_start":34,"column_end":42,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":34,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\entity\\file.rs","byte_start":68,"byte_end":75,"line_start":2,"line_end":2,"column_start":44,"column_end":51,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":44,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\entity\\file.rs","byte_start":77,"byte_end":83,"line_start":2,"line_end":2,"column_start":53,"column_end":59,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":53,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\entity\\file.rs","byte_start":85,"byte_end":94,"line_start":2,"line_end":2,"column_start":61,"column_end":70,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":61,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\entity\\file.rs","byte_start":25,"byte_end":98,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};","highlight_start":1,"highlight_end":72},{"text":"use crate::schema::files;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Bigint`, `Integer`, `Nullable`, `Timestamp`, and `Varchar`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\entity\\file.rs:2:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse diesel::sql_types::{Integer, Nullable, Varchar, Bigint, Timestamp};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `HttpResponse`, `Responder`, and `web`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":16,"byte_end":19,"line_start":1,"line_end":1,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"use actix_web::{web, Responder, HttpResponse};","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":21,"byte_end":30,"line_start":1,"line_end":1,"column_start":22,"column_end":31,"is_primary":true,"text":[{"text":"use actix_web::{web, Responder, HttpResponse};","highlight_start":22,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":32,"byte_end":44,"line_start":1,"line_end":1,"column_start":33,"column_end":45,"is_primary":true,"text":[{"text":"use actix_web::{web, Responder, HttpResponse};","highlight_start":33,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":0,"byte_end":48,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use actix_web::{web, Responder, HttpResponse};","highlight_start":1,"highlight_end":47},{"text":"use crate::dao::UserDao;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `HttpResponse`, `Responder`, and `web`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\users_manage.rs:1:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse actix_web::{web, Responder, HttpResponse};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrowed data escapes outside of associated function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":210,"byte_end":220,"line_start":11,"line_end":11,"column_start":45,"column_end":55,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":45,"highlight_end":55}],"label":"`identifier` is a reference that is only valid in the associated function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\service\\users_manage.rs","byte_start":210,"byte_end":220,"line_start":11,"line_end":11,"column_start":45,"column_end":55,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":45,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\service\\users_manage.rs","byte_start":297,"byte_end":491,"line_start":13,"line_end":16,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::verify_user(&mut conn, identifier, password)","highlight_start":1,"highlight_end":66},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`identifier` escapes the associated function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":222,"byte_end":223,"line_start":11,"line_end":11,"column_start":57,"column_end":58,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":57,"highlight_end":58}],"label":"let's call the lifetime of this reference `'1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":297,"byte_end":491,"line_start":13,"line_end":16,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::verify_user(&mut conn, identifier, password)","highlight_start":1,"highlight_end":66},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"argument requires that `'1` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: borrowed data escapes outside of associated function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\users_manage.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m----------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mlet's call the lifetime of this reference `'1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`identifier` is a reference that is only valid in the associated function body\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = pool.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::task::spawn_blocking(move || {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut conn = pool.get().expect(\"Failed to get DB connection\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            UserDao::verify_user(&mut conn, identifier, password)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`identifier` escapes the associated function body here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'1` must outlive `'static`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrowed data escapes outside of associated function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":228,"byte_end":236,"line_start":11,"line_end":11,"column_start":63,"column_end":71,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":63,"highlight_end":71}],"label":"`password` is a reference that is only valid in the associated function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\service\\users_manage.rs","byte_start":228,"byte_end":236,"line_start":11,"line_end":11,"column_start":63,"column_end":71,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":63,"highlight_end":71}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\service\\users_manage.rs","byte_start":297,"byte_end":491,"line_start":13,"line_end":16,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::verify_user(&mut conn, identifier, password)","highlight_start":1,"highlight_end":66},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`password` escapes the associated function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":238,"byte_end":239,"line_start":11,"line_end":11,"column_start":73,"column_end":74,"is_primary":false,"text":[{"text":"    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {","highlight_start":73,"highlight_end":74}],"label":"let's call the lifetime of this reference `'2`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":297,"byte_end":491,"line_start":13,"line_end":16,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::verify_user(&mut conn, identifier, password)","highlight_start":1,"highlight_end":66},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"argument requires that `'2` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: borrowed data escapes outside of associated function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\users_manage.rs:13:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn verify_user(pool: &DbPool, identifier: &str, password: &str) -> bool {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mlet's call the lifetime of this reference `'2`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`password` is a reference that is only valid in the associated function body\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = pool.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::task::spawn_blocking(move || {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut conn = pool.get().expect(\"Failed to get DB connection\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            UserDao::verify_user(&mut conn, identifier, password)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`password` escapes the associated function body here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'2` must outlive `'static`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrowed data escapes outside of associated function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":603,"byte_end":611,"line_start":22,"line_end":22,"column_start":42,"column_end":50,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":42,"highlight_end":50}],"label":"`username` is a reference that is only valid in the associated function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\service\\users_manage.rs","byte_start":603,"byte_end":611,"line_start":22,"line_end":22,"column_start":42,"column_end":50,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\service\\users_manage.rs","byte_start":702,"byte_end":891,"line_start":24,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::register(&mut conn, username, password)","highlight_start":1,"highlight_end":61},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`username` escapes the associated function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":613,"byte_end":614,"line_start":22,"line_end":22,"column_start":52,"column_end":53,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":52,"highlight_end":53}],"label":"let's call the lifetime of this reference `'1`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":702,"byte_end":891,"line_start":24,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::register(&mut conn, username, password)","highlight_start":1,"highlight_end":61},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"argument requires that `'1` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: borrowed data escapes outside of associated function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\users_manage.rs:24:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mlet's call the lifetime of this reference `'1`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`username` is a reference that is only valid in the associated function body\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = pool.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::task::spawn_blocking(move || {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut conn = pool.get().expect(\"Failed to get DB connection\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            UserDao::register(&mut conn, username, password)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`username` escapes the associated function body here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'1` must outlive `'static`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"borrowed data escapes outside of associated function","code":{"code":"E0521","explanation":"Borrowed data escapes outside of closure.\n\nErroneous code example:\n\n```compile_fail,E0521\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el: &str| {\n    list.push(el); // error: `el` escapes the closure body here\n};\n```\n\nA type annotation of a closure parameter implies a new lifetime declaration.\nConsider to drop it, the compiler is reliably able to infer them.\n\n```\nlet mut list: Vec<&str> = Vec::new();\n\nlet _add = |el| {\n    list.push(el);\n};\n```\n\nSee the [Closure type inference and annotation][closure-infere-annotation] and\n[Lifetime elision][lifetime-elision] sections of the Book for more details.\n\n[closure-infere-annotation]: https://doc.rust-lang.org/book/ch13-01-closures.html#closure-type-inference-and-annotation\n[lifetime-elision]: https://doc.rust-lang.org/reference/lifetime-elision.html\n"},"level":"error","spans":[{"file_name":"src\\service\\users_manage.rs","byte_start":619,"byte_end":627,"line_start":22,"line_end":22,"column_start":58,"column_end":66,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":58,"highlight_end":66}],"label":"`password` is a reference that is only valid in the associated function body","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src\\service\\users_manage.rs","byte_start":619,"byte_end":627,"line_start":22,"line_end":22,"column_start":58,"column_end":66,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":58,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"desugaring of `async` block or function","def_site_span":{"file_name":"src/lib.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":false,"text":[],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\service\\users_manage.rs","byte_start":702,"byte_end":891,"line_start":24,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::register(&mut conn, username, password)","highlight_start":1,"highlight_end":61},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"`password` escapes the associated function body here","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":629,"byte_end":630,"line_start":22,"line_end":22,"column_start":68,"column_end":69,"is_primary":false,"text":[{"text":"    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {","highlight_start":68,"highlight_end":69}],"label":"let's call the lifetime of this reference `'2`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\service\\users_manage.rs","byte_start":702,"byte_end":891,"line_start":24,"line_end":27,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        tokio::task::spawn_blocking(move || {","highlight_start":9,"highlight_end":46},{"text":"            let mut conn = pool.get().expect(\"Failed to get DB connection\");","highlight_start":1,"highlight_end":77},{"text":"            UserDao::register(&mut conn, username, password)","highlight_start":1,"highlight_end":61},{"text":"        })","highlight_start":1,"highlight_end":11}],"label":"argument requires that `'2` must outlive `'static`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0521]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: borrowed data escapes outside of associated function\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\users_manage.rs:24:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn register(pool: &DbPool, username: &str, password: &str) -> Result<(), String> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--------\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14mlet's call the lifetime of this reference `'2`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m`password` is a reference that is only valid in the associated function body\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        let pool = pool.clone();\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        tokio::task::spawn_blocking(move || {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut conn = pool.get().expect(\"Failed to get DB connection\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            UserDao::register(&mut conn, username, password)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m27\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        })\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|__________\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`password` escapes the associated function body here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9margument requires that `'2` must outlive `'static`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `pool`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":868,"byte_end":872,"line_start":30,"line_end":30,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"pub async fn extract_contour_api_dbpool(pool:web::Data<DbPool>,model_id: web::Path<u32>) -> impl Responder {","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\controllers\\model_controller.rs","byte_start":868,"byte_end":872,"line_start":30,"line_end":30,"column_start":41,"column_end":45,"is_primary":true,"text":[{"text":"pub async fn extract_contour_api_dbpool(pool:web::Data<DbPool>,model_id: web::Path<u32>) -> impl Responder {","highlight_start":41,"highlight_end":45}],"label":null,"suggested_replacement":"_pool","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `pool`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\controllers\\model_controller.rs:30:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub async fn extract_contour_api_dbpool(pool:web::Data<DbPool>,model_id: web::Path<u32>) -> impl Responder {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_pool`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `outputpath`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\service\\model_generate.rs","byte_start":12859,"byte_end":12869,"line_start":298,"line_end":298,"column_start":58,"column_end":68,"is_primary":true,"text":[{"text":"    pub fn model_generate_api(&mut self, inputfile:&str, outputpath:&str)","highlight_start":58,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\service\\model_generate.rs","byte_start":12859,"byte_end":12869,"line_start":298,"line_end":298,"column_start":58,"column_end":68,"is_primary":true,"text":[{"text":"    pub fn model_generate_api(&mut self, inputfile:&str, outputpath:&str)","highlight_start":58,"highlight_end":68}],"label":null,"suggested_replacement":"_outputpath","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `outputpath`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\model_generate.rs:298:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m298\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn model_generate_api(&mut self, inputfile:&str, outputpath:&str)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_outputpath`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `p3`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\service\\extract_contour.rs","byte_start":1543,"byte_end":1545,"line_start":55,"line_end":55,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        let (p1, p3) = if i == 1 {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\service\\extract_contour.rs","byte_start":1543,"byte_end":1545,"line_start":55,"line_end":55,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        let (p1, p3) = if i == 1 {","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":"_p3","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `p3`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\extract_contour.rs:55:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (p1, p3) = if i == 1 {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_p3`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"variable `g_location_win` is assigned to, but never used","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\service\\extract_contour.rs","byte_start":10814,"byte_end":10828,"line_start":284,"line_end":284,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        let mut g_location_win: [i32; 2] = [0, 0];","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider using `_g_location_win` instead","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: variable `g_location_win` is assigned to, but never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\extract_contour.rs:284:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut g_location_win: [i32; 2] = [0, 0];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: consider using `_g_location_win` instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"value assigned to `g_location_win` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src\\service\\extract_contour.rs","byte_start":11973,"byte_end":11987,"line_start":311,"line_end":311,"column_start":13,"column_end":27,"is_primary":true,"text":[{"text":"            g_location_win = [0.0 as i32, 0.0 as i32];","highlight_start":13,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: value assigned to `g_location_win` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\service\\extract_contour.rs:311:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            g_location_win = [0.0 as i32, 0.0 as i32];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `depth`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src\\core_algorithm\\svgbaseprocess.rs","byte_start":2185,"byte_end":2190,"line_start":74,"line_end":74,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"            let depth = max_z - min_z;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src\\core_algorithm\\svgbaseprocess.rs","byte_start":2185,"byte_end":2190,"line_start":74,"line_end":74,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"            let depth = max_z - min_z;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":"_depth","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused variable: `depth`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\core_algorithm\\svgbaseprocess.rs:74:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let depth = max_z - min_z;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11mhelp: if this is intentional, prefix it with an underscore: `_depth`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 4 previous errors; 13 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 4 previous errors; 13 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"For more information about this error, try `rustc --explain E0521`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0521`.\u001b[0m\n"}
